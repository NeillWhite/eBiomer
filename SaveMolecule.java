package com.goosebumpanalytics.biomer;

import java.io.PrintStream;

/** The representation of a Chemical .pdb model */

class SaveMolecule {

	PrintStream pw;

	/** Create a Chemical model by parsing an input stream */
	SaveMolecule (Molecule m, PrintStream pw) throws Exception {
		this.pw = pw;
		int atomCounter = 1;
		int residueCounter = 0;
		if ( m.numberOfAtoms == 0 )
			return;
		if ( m.typeSet == false )
			m.establishConnectivity( true );
		m.center();
		m.resolveCoordinates();
		pw.println( "AUTHOR generated by eBiomer, http://www.scripps.edu/~nwhite/Biomer" );
		for ( int i = 0; i < m.numberOfStrands; i++ ){
			Strand strand = m.strand[ i ];
			if ( strand.numberOfAtoms == 0 )
				continue;
			residueCounter = 0;
			if ( i > 0 )
				pw.println( "TER" );
			for ( int j = 0; j < strand.numberOfResidues; j++ ){
				Residue residue = strand.residue[ j ];
				if ( residue.numberOfAtoms == 0 )
					continue;
				residueCounter++;
				for ( int k = 0; k < residue.numberOfAtoms; k++ ){
					Atom atom = residue.atom[ k];
					pw.print( "ATOM" );
					if ( atomCounter < 10 )
						pw.print( "      " );
					else if ( atomCounter < 100 )
						pw.print( "     " );
					else if ( atomCounter < 1000 )
						pw.print( "    " );
					else if ( atomCounter < 10000 )
						pw.print( "   " );
					else if ( atomCounter < 100000 )
						pw.print( "  " );
					else if ( atomCounter < 1000000 )
						pw.print( " " );
					atom.modelAtomNumber = atomCounter;
					pw.print( atomCounter++ + " " );
					if ( atom.name.length() == 1 )
						pw.print( " " + atom.name.toUpperCase() + "   " );
					else if ( atom.name.length() == 2 )
						pw.print( " " + atom.name.toUpperCase() + "  " );
					else if ( atom.name.length() == 3 )
						pw.print( " "  + atom.name.toUpperCase() + " " );
					else if ( atom.name.length() == 4 )
						pw.print( atom.name.toUpperCase() + " " );
					else if ( atom.name.length() > 4 )
						pw.print( atom.name.toUpperCase().substring( 0, 4 ) 
								+ " " );
					if ( residue.name.length() == 1 )
						pw.print( "  " + residue.name.toUpperCase() );
					else if ( residue.name.length() == 2 )
						pw.print( " " + residue.name.toUpperCase() );
					else if ( residue.name.length() == 3 )
						pw.print( residue.name.toUpperCase() );
					else if ( residue.name.length() > 3 )
						pw.print( residue.name.toUpperCase().substring( 
								0, 4 ) );
					if ( residueCounter < 10 )
						pw.print( "     " );
					else if ( residueCounter < 100 )
						pw.print( "    " );
					else if ( residueCounter < 1000 )
						pw.print( "   " );
					else if ( residueCounter < 10000 )
						pw.print( "  " );
					else if ( residueCounter < 100000 )
						pw.print( " " );
					pw.print( residueCounter + "    " );
					pw.print( coordinate( atom.coord[ 0 ] ) );
					pw.print( coordinate( atom.coord[ 1 ] ) );
					pw.println( coordinate( atom.coord[ 2 ] ) );
				}
			}
		}
		for ( int i = 0; i < m.numberOfAtoms; i++ ){
			int numberOfConnections = m.connected[ i ][ 0 ];
			if ( numberOfConnections > 0 )
				pw.print( "CONECT" );
			else 
				continue;
			printAtom( m.atom[ i ].modelAtomNumber );	
			for ( int j = 1; j <= numberOfConnections; j++ ){
				int bondedToAtomNumber = m.connected[ i ][ j ];
				Atom bondedToAtom = m.atom[ bondedToAtomNumber ];
				printAtom( bondedToAtom.modelAtomNumber );
			}
			pw.println();
		}
		pw.println( "END" );
	}

	private void printAtom( int atomNumber ){
		if ( atomNumber < 10 )
			pw.print("    " + atomNumber );
		else if ( atomNumber < 100 )
			pw.print("   " + atomNumber );
		else if ( atomNumber < 1000 )
			pw.print("  " + atomNumber );
		else if ( atomNumber < 10000 )
			pw.print( " " + atomNumber );
		else if ( atomNumber < 100000 )
			pw.print( atomNumber );
	}

	private String coordinate( float coord ){
		String coordString = String.valueOf( coord );
		String intPart = " ";
		String floatPart = " ";
		String returnString = null;
		int radix = coordString.indexOf( "." );
		if ( radix != -1 ){
			intPart = coordString.substring( 0, radix );
			if ( radix != coordString.length() )
				floatPart = coordString.substring( radix + 1 );
		}
		else 
			return( coordString );
		if ( intPart.length() == 1 )
			returnString = "   " + intPart;
		else if ( intPart.length() == 2 )
			returnString = "  " + intPart;
		else if ( intPart.length() == 3 )
			returnString = " " + intPart;
		else if ( intPart.length() == 4 )
			returnString = intPart;
		else if ( intPart.length() > 4 )
			returnString = intPart.substring( 0, 3 );
		returnString += ".";
		if ( floatPart.length() == 1 )
			returnString += floatPart + "00";
		else if ( floatPart.length() == 2 )
			returnString += floatPart + "0";
		else if ( floatPart.length() == 3 )
			returnString += floatPart;
		else if ( floatPart.length() > 3 )
			returnString += floatPart.substring( 0, 3 );
		return( returnString );
	}
}
